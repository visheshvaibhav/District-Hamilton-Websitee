üìò PART 1: PROJECT OVERVIEW

Project Title:

The District Tapas + Bar ‚Äî Restaurant Ordering & Admin Management System

‚∏ª

Description:

The District Tapas + Bar is a modern, upscale restaurant offering a variety of tapas, handhelds, entr√©es, and handcrafted cocktails. This project involves building a fully functional, customizable web application that allows users to place pickup and delivery orders, view the menu dynamically, purchase and send gift cards, and perform tip-based payments for deliveries.

The system will include both a customer-facing frontend and a powerful admin dashboard using FilamentPHP, allowing the restaurant staff to manage everything ‚Äî from dishes and delivery zones to operational hours and gift card redemptions ‚Äî without any hardcoding.

This website will be built from scratch in Laravel 11 with modern best practices, designed to reflect the clean and attractive visual quality seen in premium Squarespace templates, while offering scalable backend functionality and customization options.

‚∏ª

High-Level Goals:
	‚Ä¢	Build a modular and maintainable restaurant website
	‚Ä¢	Enable customers to easily browse the menu and order online (delivery/pickup)
	‚Ä¢	Provide a gift card system (physical + e-card)
	‚Ä¢	Support tipping for delivery drivers
	‚Ä¢	Create a customizable admin panel (FilamentPHP-based)
	‚Ä¢	Ensure delivery/pickup logic is smart and time-sensitive
	‚Ä¢	Provide a guest checkout flow that doesn't require registration
	‚Ä¢	Build in language localization support (English now, French in future)
	‚Ä¢	Ensure clean, structured codebase optimized for Cursor AI development

‚∏ª

Business Case:

This platform eliminates the need for expensive subscription services like Squarespace or third-party ordering platforms by offering a custom-built solution tailored specifically to The District Tapas + Bar's menu structure, service flow, and branding needs.

It is designed to be simple enough for staff to manage daily operations, yet powerful and extensible enough to support future features like loyalty rewards, pre-orders, or event bookings.

‚∏ª

Platform Scope:

Section	Description
Frontend	Customer-facing menu, cart, checkout, tipping, gift cards
Backend	Admin dashboard (FilamentPHP) with full control over menu, categories, dishes, zones, timings, gift cards
Database	Relational structure (MySQL, normalized, based on ERD) with dynamic entities for menu, orders, tips, etc.
Delivery/Pickup System	Real-time pickup timing (based on preparation logic), delivery radius, buffer time customization
Gift Card System	Buy + send via email (e-card) or order a physical card, includes backend tracking and validation
Deployment	GCP or AWS (EC2/VM) with SSL, Stripe integration, and potential CDN for performance


‚∏ª

User Experience Vision:
	‚Ä¢	Modern, visually appealing frontend (inspired by Squarespace)
	‚Ä¢	Frictionless checkout for guests (no forced sign-up)
	‚Ä¢	Admin-friendly panel mimicking the simplicity of WooCommerce or Shopify
	‚Ä¢	Fast page loads, real-time feedback, smart defaults
	‚Ä¢	Smooth mobile-first responsiveness for dine-in or on-the-go orders
	‚Ä¢	Bilingual-ready architecture (English first, French later toggle)


Perfect ‚Äî here is Part 2: User Roles, written in a fully comprehensive format, suitable for Cursor or any developer reading the project scope.

‚∏ª

üìò PART 2: USER ROLES

This system will serve two types of users:

‚∏ª

üë§ 1. Customer (Guest User)

Definition:
The end-user visiting the website to explore the menu, place an order, or purchase a gift card. No user account or login is required.

üîì Authentication:
	‚Ä¢	No mandatory registration
	‚Ä¢	Guest checkout only
	‚Ä¢	Optional entry of:
	‚Ä¢	Name
	‚Ä¢	Email (for order confirmation or gift card delivery)
	‚Ä¢	Phone number (optional)
	‚Ä¢	Delivery address (only when "delivery" is selected)

üõí Capabilities:
	‚Ä¢	Browse and filter menu categories (Tapas, Handhelds, Entrees, etc.)
	‚Ä¢	View dish details, tags (e.g., GF, VEG), and pricing
	‚Ä¢	Add items to cart
	‚Ä¢	Customize dishes (if applicable: add-ons, sides, etc.)
	‚Ä¢	Choose between Pickup or Delivery
	‚Ä¢	Select preferred pickup time (calculated dynamically based on order content and admin-defined prep/buffer times)
	‚Ä¢	Enter delivery address (delivery is allowed only within a configurable delivery radius)
	‚Ä¢	Add a tip (for delivery orders only ‚Äî percent-based)
	‚Ä¢	Purchase gift cards:
	‚Ä¢	Choose e-card or physical card
	‚Ä¢	Enter recipient name, email
	‚Ä¢	Add custom message (optional)
	‚Ä¢	Receive order confirmation email and estimated timing

üì© Notifications:
	‚Ä¢	Order confirmation email (with ETA or pickup time)
	‚Ä¢	Gift card email (for e-card option)
	‚Ä¢	Optional delivery receipt (if integrated with Stripe)


üßë‚Äçüíº 2. Admin (Restaurant Staff)

Definition:
Authorized staff managing the restaurant menu, orders, pickup/delivery settings, and gift cards. Admin interface is built using FilamentPHP.

üîê Authentication:
	‚Ä¢	Username and password (FilamentPHP handles roles and access)
	‚Ä¢	Admins can login securely to manage backend operations

üõ† Admin Panel Capabilities:
	‚Ä¢	Menu Management
	‚Ä¢	Create/Edit/Delete categories (Tapas, Handhelds, etc.)
	‚Ä¢	Create/Edit/Delete individual menu items
	‚Ä¢	Assign category, price, description, tags (GF, VEG), prep time
	‚Ä¢	Attach food image (stored in cloud or local storage)
	‚Ä¢	Set item as pickup-only or delivery-available
	‚Ä¢	Define optional add-ons for each dish (e.g., bacon, cheese)
	‚Ä¢	Order Management
	‚Ä¢	View incoming orders (status: pending, preparing, completed, canceled)
	‚Ä¢	Update order status manually
	‚Ä¢	View order details: items, modifiers, tip, total, delivery/pickup
	‚Ä¢	Delivery Settings
	‚Ä¢	Set delivery radius (in kilometers)
	‚Ä¢	Define delivery fee (optional)
	‚Ä¢	Set buffer time per order (used in pickup time logic)
	‚Ä¢	Configure kitchen hours (used for availability)
	‚Ä¢	Gift Card Management
	‚Ä¢	View gift card purchases
	‚Ä¢	Search by code, recipient, email
	‚Ä¢	Mark gift cards as redeemed manually (for in-person use)
	‚Ä¢	Admin Settings
	‚Ä¢	Update contact info, hours, or global messages
	‚Ä¢	(Optional: upload hero images, logo, or customize UI content)

‚∏ª

üë• Summary of Roles

Role	Auth Required?	Capabilities
Customer (Guest)	‚ùå	Browse menu, order (delivery/pickup), gift cards, tip
Admin	‚úÖ	Full CRUD for menu, gift cards, orders, delivery/pickup settings


‚∏ª

This setup ensures a smooth and accessible customer experience without registration barriers, while giving the restaurant full backend control via a clean and secure admin panel.

Understood. Here's Part 3: Core Features ‚Äî detailed, structured, and written as technical documentation for Cursor or any developer working on the system.

‚∏ª

PART 3: CORE FEATURES

This section outlines the core system functionality for the customer-facing website. These features are essential for enabling ordering, gift card handling, and customer interaction with the restaurant's offerings. All features are built for guest users and do not require registration or login.

‚∏ª

3.1 Menu Browsing

Features:
	‚Ä¢	Dynamic menu structure based on categories (Tapas, Handhelds, Pastas, Entrees, etc.)
	‚Ä¢	Each menu item will have:
	‚Ä¢	Name
	‚Ä¢	Price
	‚Ä¢	Description
	‚Ä¢	Optional dietary tags (GF, VEG, V, GFO, etc.)
	‚Ä¢	Availability (pickup only / delivery enabled)
	‚Ä¢	Optional image
	‚Ä¢	Menu items grouped by category on the frontend
	‚Ä¢	Certain categories (e.g., Cocktails, Beer) will not be available for delivery and may only be visible for browsing
	‚Ä¢	Optional menu categories (e.g., Dessert of the day) can be set as dynamically updated or hidden until needed

‚∏ª

3.2 Item Customization

Certain menu items may support customizations:
	‚Ä¢	Add-ons such as sides (e.g., fries, salad), sauces, or extras (e.g., cheese, bacon)
	‚Ä¢	Admin will define available add-ons per menu item
	‚Ä¢	Selected add-ons will be reflected in the order and pricing during checkout

‚∏ª

3.3 Cart Functionality
	‚Ä¢	Users can add and remove menu items from their cart
	‚Ä¢	Quantity control per item
	‚Ä¢	Add-ons are stored per item and appear as sub-items under each dish
	‚Ä¢	Total cost is dynamically calculated
	‚Ä¢	Cart is stored client-side during session (e.g., via localStorage)

‚∏ª

3.4 Pickup and Delivery Option

Upon checkout, users select either:
	‚Ä¢	Pickup
	‚Ä¢	User selects a preferred pickup time
	‚Ä¢	System calculates earliest possible pickup time based on:
	‚Ä¢	Sum of preparation times for selected dishes
	‚Ä¢	Admin-defined kitchen buffer time (e.g., 15 minutes)
	‚Ä¢	Admin-defined kitchen hours (respecting open/close window)
	‚Ä¢	Delivery
	‚Ä¢	User enters delivery address
	‚Ä¢	System validates delivery eligibility based on:
	‚Ä¢	Admin-defined delivery radius (e.g., 5 km)
	‚Ä¢	Optional delivery fee
	‚Ä¢	Same preparation + buffer time logic as pickup
	‚Ä¢	Admin can later view and manage delivery orders from the dashboard

‚∏ª

3.5 Tipping
	‚Ä¢	Tipping is only available for delivery orders
	‚Ä¢	Tip options are percentage-based, calculated on total order value
	‚Ä¢	Configurable percentage presets (e.g., 10%, 15%, 20%)
	‚Ä¢	Selected tip is added to final total during checkout
	‚Ä¢	Tipping field is disabled if pickup is selected

‚∏ª

3.6 Gift Card Purchase

Users can purchase a gift card directly from the frontend.

Gift Card Form Includes:
	‚Ä¢	Amount selection (preset values or custom amount)
	‚Ä¢	Type selection:
	‚Ä¢	E-card (digital delivery to email)
	‚Ä¢	Physical card (note: physical delivery must be handled offline/in-store)
	‚Ä¢	Recipient name and email (for e-cards)
	‚Ä¢	Optional personal message
	‚Ä¢	Purchaser's name and email for confirmation

After purchase:
	‚Ä¢	Stripe payment is processed
	‚Ä¢	E-card is emailed to the recipient with a unique code
	‚Ä¢	Physical card purchase info is stored in admin dashboard for manual handling
	‚Ä¢	Gift card codes are only redeemable in-person

‚∏ª

3.7 Checkout Process
	‚Ä¢	Seamless, guest-only checkout
	‚Ä¢	Order Summary with:
	‚Ä¢	Line items
	‚Ä¢	Customizations/add-ons
	‚Ä¢	Delivery fee (if applicable)
	‚Ä¢	Tip (if selected)
	‚Ä¢	Gift card application (future feature, if expanded)
	‚Ä¢	Payment via Stripe
	‚Ä¢	User receives email confirmation with order details and pickup/delivery timing
	‚Ä¢	Admin dashboard displays the order in real-time with status set to "Pending"

‚∏ª

3.8 Language Toggle
	‚Ä¢	Primary language: English
	‚Ä¢	System will be built with support for a second language (French)
	‚Ä¢	Language toggle in the site header
	‚Ä¢	Static content will use language files (Laravel localization system)
	‚Ä¢	Menu item names and descriptions may initially remain in English, but content fields will be designed to allow multi-language support in the future

Noted ‚Äî I will now integrate that important requirement: gift card functionality should be fully implemented but toggleable from the admin panel. I'll reflect this explicitly in Part 4, and later we'll retroactively insert a note about it in the compiled .txt file for Part 3.

‚∏ª

PART 4: ADMIN PANEL FEATURES (FilamentPHP)

The admin panel is the operational backbone of the application and will be built using FilamentPHP. This panel is intended to replicate the flexibility of platforms like Squarespace or WooCommerce, allowing restaurant staff to manage all website functionality without writing any code.

The admin dashboard will have modular sections, each designed to manage a core area of the business.

‚∏ª

4.1 Dashboard Overview
	‚Ä¢	Admin login via FilamentPHP's secure authentication
	‚Ä¢	Welcome dashboard with key stats:
	‚Ä¢	Today's orders
	‚Ä¢	Upcoming pickups/deliveries
	‚Ä¢	Gift cards purchased
	‚Ä¢	Toggle for gift card system (enabled/disabled)

‚∏ª

4.2 Menu Management

Categories
	‚Ä¢	Create/edit/delete categories (e.g., Tapas, Handhelds, Cocktails)
	‚Ä¢	Toggle: available for delivery or pickup only
	‚Ä¢	Sort order of categories for frontend display

Menu Items
	‚Ä¢	Create/edit/delete individual menu items
	‚Ä¢	Assign item to a category
	‚Ä¢	Set price
	‚Ä¢	Set estimated preparation time (in minutes)
	‚Ä¢	Upload image
	‚Ä¢	Set tags (GF, VEG, V, etc.)
	‚Ä¢	Set delivery availability (pickup-only or pickup+delivery)
	‚Ä¢	Toggle: item is currently available/unavailable
	‚Ä¢	Attach add-ons (with names and prices)
	‚Ä¢	Optional field for seasonal/daily items (e.g., dessert board)

‚∏ª

4.3 Add-Ons Manager
	‚Ä¢	Define common add-ons (e.g., bacon, fries, sauces)
	‚Ä¢	Assign to one or more menu items
	‚Ä¢	Set additional cost per add-on

‚∏ª

4.4 Order Management
	‚Ä¢	View list of all orders (chronologically)
	‚Ä¢	View order detail (items, add-ons, tip, amount, delivery or pickup, etc.)
	‚Ä¢	Update order status:
	‚Ä¢	Pending
	‚Ä¢	Preparing
	‚Ä¢	Ready
	‚Ä¢	Completed
	‚Ä¢	Canceled
	‚Ä¢	View/filter by:
	‚Ä¢	Date range
	‚Ä¢	Status
	‚Ä¢	Pickup vs Delivery

‚∏ª

4.5 Delivery & Pickup Settings
	‚Ä¢	Define delivery radius (in kilometers)
	‚Ä¢	Set optional delivery fee
	‚Ä¢	Set kitchen hours (start and end time)
	‚Ä¢	Set buffer time to add to prep time (for total ETA logic)
	‚Ä¢	Enable/disable delivery temporarily (e.g., during high volume)
	‚Ä¢	Enable/disable pickup temporarily (e.g., if kitchen is closed early)

‚∏ª

4.6 Tipping Settings
	‚Ä¢	Enable/disable tipping globally
	‚Ä¢	Set tip percentages (e.g., 10%, 15%, 20%) available to the user
	‚Ä¢	Tip field appears only for delivery orders

‚∏ª

4.7 Gift Card Management

Note: Gift card feature should be fully implemented, but able to be turned on or off via a toggle in the admin panel.

Admin Capabilities:
	‚Ä¢	Enable or disable the gift card system
	‚Ä¢	View all gift card purchases
	‚Ä¢	Filter by type: e-card or physical
	‚Ä¢	View recipient info and amount
	‚Ä¢	Redeem gift card manually in store (mark as "redeemed")
	‚Ä¢	Search by gift card code or email

‚∏ª

4.8 Localization & Language
	‚Ä¢	Define site-wide settings such as:
	‚Ä¢	Primary language
	‚Ä¢	Enable/disable French as a secondary language (toggle-based)
	‚Ä¢	All content passed through Laravel's lang system
	‚Ä¢	Optional upload fields for French equivalents of:
	‚Ä¢	Category name
	‚Ä¢	Menu item name/description
	‚Ä¢	Gift card labels

‚∏ª

4.9 Global Site Settings
	‚Ä¢	Restaurant contact info (phone, email, address)
	‚Ä¢	Google Maps integration toggle
	‚Ä¢	Upload logo, header images, or hero sections
	‚Ä¢	Optional message/alert bar (e.g., "Closed on Monday due to holiday")

‚∏ª

4.10 Admin User Management
	‚Ä¢	Manage admin users with roles (optional; default is single super-admin)
	‚Ä¢	Secure password reset, 2FA support (optional via Filament plugin)

‚∏ª

This admin panel will be styled cleanly using FilamentPHP's panel builder. Custom components may be built when required to extend functionality beyond native resources, such as the gift card system toggle, delivery zone mapping, or multi-language menu entry forms.

Great ‚Äî here is Part 5: Menu Management Design. This section focuses on the backend structure and frontend behavior of how menu items, categories, dietary tags, and add-ons are managed. It is deeply tied to the database schema (ERD) and FilamentPHP resource configuration.

‚∏ª

PART 5: MENU MANAGEMENT DESIGN

The menu is the heart of the application and must support full flexibility and real-time control from the admin panel without any code changes. Menu management must also support item-specific options, allergy and dietary tags, dynamic visibility, and delivery/pickup compatibility.

‚∏ª

5.1 Categories

Menu items are organized under categories. Categories will:
	‚Ä¢	Be created and managed from the admin panel
	‚Ä¢	Contain:
	‚Ä¢	Category name (English, optionally French)
	‚Ä¢	Delivery availability (is_deliverable: boolean)
	‚Ä¢	Pickup-only restriction (if needed)
	‚Ä¢	Sort order (for frontend display)
	‚Ä¢	Visibility toggle (to hide/show entire category on frontend)

Examples of categories:
	‚Ä¢	Tapas
	‚Ä¢	Handhelds
	‚Ä¢	Entrees
	‚Ä¢	Pastas
	‚Ä¢	Desserts
	‚Ä¢	Cocktails (Pickup only)
	‚Ä¢	Wine & Beer (Pickup only)

Categories will appear in the frontend menu as sections, and the system will ensure delivery-only orders exclude any pickup-only categories automatically.

‚∏ª

5.2 Menu Items

Each menu item will be stored as an independent entity, linked to a category.

Fields:
	‚Ä¢	Name (English, optionally French)
	‚Ä¢	Description
	‚Ä¢	Price
	‚Ä¢	Category (foreign key)
	‚Ä¢	Preparation time in minutes
	‚Ä¢	Tags (GF, VEG, etc.) ‚Äì multiple tags per item
	‚Ä¢	Delivery availability (is_pickup_only: boolean)
	‚Ä¢	Item availability (is_available: boolean)
	‚Ä¢	Image path (stored locally or via cloud storage)
	‚Ä¢	Sort order (for frontend display)
	‚Ä¢	Visibility toggle

Optional behaviors:
	‚Ä¢	If an item is part of a changing board (e.g., desserts), it can be set as "hidden" until manually toggled on
	‚Ä¢	If an item is temporarily unavailable, admin can toggle is_available to false

‚∏ª

5.3 Dietary & Allergy Tags

Each menu item can be linked to multiple dietary or allergy-related tags.

Tags include:
	‚Ä¢	GF (Gluten-Free)
	‚Ä¢	GFO (Gluten-Free Option)
	‚Ä¢	VEG (Vegetarian)
	‚Ä¢	V (Vegan)
	‚Ä¢	Contains Nuts
	‚Ä¢	Contains Dairy
	‚Ä¢	Spicy

Tags will be stored in a separate table (menu_item_tags) and attached via a many-to-one relationship with menu items. This ensures scalability and translation if needed later.

On the frontend, tags will appear as indicators next to item descriptions or names.

‚∏ª

5.4 Add-Ons

Some dishes allow optional modifications or add-ons (e.g., add bacon, change side to fries, add cheese).

Structure:
	‚Ä¢	Stored as individual entries in an add_ons table
	‚Ä¢	Each add-on:
	‚Ä¢	Has a name
	‚Ä¢	Optional price (can be $0)
	‚Ä¢	Can be linked to multiple menu items
	‚Ä¢	Appears as a checkbox or dropdown in the cart/checkout view

Add-ons will appear in the admin panel when editing a menu item. Admins can add new ones or link existing ones.

‚∏ª

5.5 Menu Item Visibility and Control

From the admin panel, the restaurant staff can:
	‚Ä¢	Add new dishes quickly during seasonal changes
	‚Ä¢	Hide/show dishes on the frontend without deleting them
	‚Ä¢	Mark dishes as "Pickup Only" (e.g., alcohol)
	‚Ä¢	Reorder categories and items using drag-and-drop or sort number fields
	‚Ä¢	Add descriptions and tags in both English and French (future-proofing for bilingual support)

‚∏ª

5.6 Frontend Behavior

Frontend menu UI will:
	‚Ä¢	Display menu grouped by category
	‚Ä¢	Show item description, tags, price, and image
	‚Ä¢	Highlight availability (e.g., "Pickup Only" or "Currently Unavailable")
	‚Ä¢	Display add-on options in the cart/checkout only when relevant
	‚Ä¢	Exclude any pickup-only categories from delivery orders
	‚Ä¢	Automatically respect visibility toggles (hidden categories/items are never rendered)

‚∏ª

This system ensures maximum flexibility for the restaurant, allowing them to change the live menu instantly based on kitchen capacity, ingredient availability, or promotional needs.

Here is Part 6: Order Flow ‚Äì Delivery & Pickup, fully detailed to guide both the backend logic and frontend behavior required for dynamic, accurate, and user-friendly order handling.

‚∏ª

PART 6: ORDER FLOW ‚Äì DELIVERY & PICKUP

This section describes the full logic of how orders are placed, processed, and managed for both delivery and pickup options. The system will calculate estimated readiness times based on dish prep duration, delivery radius, kitchen buffer time, and other factors.

‚∏ª

6.1 Order Type Selection

At checkout, the customer must choose between:
	‚Ä¢	Pickup
	‚Ä¢	Delivery

This selection dynamically updates the rest of the checkout form:
	‚Ä¢	Pickup: No delivery address is required
	‚Ä¢	Delivery: Address field becomes mandatory; system validates delivery eligibility

‚∏ª

6.2 Pickup Order Flow

User Flow:
	1.	User selects "Pickup"
	2.	System calculates estimated preparation time for selected dishes
	3.	Admin-defined buffer time is added to ensure kitchen can prepare the order
	4.	Customer is prompted to select a preferred pickup time, but the earliest time available is auto-suggested based on:
	‚Ä¢	Dish preparation time sum
	‚Ä¢	Buffer time
	‚Ä¢	Current kitchen operating hours
	5.	User selects a time within the kitchen hours and confirms order
	6.	Email is sent with pickup details and selected time

Admin-Defined Parameters:
	‚Ä¢	Kitchen open and close time (e.g., 4:00 PM to 10:00 PM)
	‚Ä¢	Buffer time in minutes (e.g., 15‚Äì20 mins)
	‚Ä¢	Admin may override estimated times per dish if needed

‚∏ª

6.3 Delivery Order Flow

User Flow:
	1.	User selects "Delivery"
	2.	System asks for user address and validates:
	‚Ä¢	Is within admin-defined delivery radius (e.g., 5 km from restaurant)
	‚Ä¢	If not, the order cannot proceed and an error is shown
	3.	System calculates delivery ETA:
	‚Ä¢	Sum of dish prep times
	‚Ä¢	Buffer time
	‚Ä¢	(Optional: Estimated delivery travel time ‚Äì static or calculated later)
	4.	Admin-defined delivery fee (if any) is added to the order total
	5.	Tip selection field appears (percent-based)
	6.	Order is confirmed via Stripe payment
	7.	Confirmation email includes delivery address and ETA

Admin-Defined Parameters:
	‚Ä¢	Delivery radius in kilometers
	‚Ä¢	Delivery fee (flat rate or $0)
	‚Ä¢	Buffer time (same as for pickup)
	‚Ä¢	Toggle to disable delivery during peak hours or downtime

‚∏ª

6.4 Order Data Stored

All orders will store the following details in the database:
	‚Ä¢	Order type (pickup/delivery)
	‚Ä¢	Customer name, email, phone
	‚Ä¢	Delivery address (nullable for pickup)
	‚Ä¢	Selected dishes and quantities
	‚Ä¢	Add-ons selected per item (stored in JSON or related table)
	‚Ä¢	Tip amount
	‚Ä¢	Delivery fee (if applicable)
	‚Ä¢	Total amount charged
	‚Ä¢	Estimated readiness time or ETA
	‚Ä¢	Timestamp of order creation
	‚Ä¢	Order status: Pending, Preparing, Ready, Completed, Canceled

‚∏ª

6.5 Order Status Management (Admin)

Admins will manage order lifecycles from their dashboard:
	‚Ä¢	View list of all orders (latest first)
	‚Ä¢	Filter by type (pickup/delivery) or status
	‚Ä¢	View full order details including dishes, customizations, tip, and total
	‚Ä¢	Update status manually through the following stages:
	‚Ä¢	Pending (default)
	‚Ä¢	Preparing
	‚Ä¢	Ready for Pickup / Out for Delivery
	‚Ä¢	Completed
	‚Ä¢	Canceled

Changing the status does not send automatic notifications unless email/SMS integration is added in a later phase.

‚∏ª

6.6 Edge Cases
	‚Ä¢	If a customer places a delivery order outside of delivery radius, they cannot proceed; a helpful message explains the restriction
	‚Ä¢	If current time plus prep time exceeds kitchen close time, earliest available pickup time rolls over to next valid window (optional advanced logic)
	‚Ä¢	If delivery is disabled from admin, the delivery option is hidden at checkout
	‚Ä¢	If no menu items are marked as deliverable, only pickup option is available

‚∏ª

This system ensures accurate readiness estimates, real-time order validation, and provides staff with operational clarity, while keeping the customer experience smooth and intuitive.

Perfect ‚Äî thanks for the clarification.

You're absolutely right: it makes total sense to allow gift cards to be redeemed both in-store and online. This way, the system becomes much more flexible, and customers can use gift cards during checkout just like any other payment method.

Let me now revise Part 7 to reflect this hybrid redemption model ‚Äî both online and in-store.

‚∏ª

PART 7: GIFT CARD SYSTEM 

The gift card system allows customers to purchase digital or physical gift cards and redeem them either online or in-person at the restaurant. This functionality provides both convenience for customers and flexibility for staff.

The system must be fully implemented, with a global toggle switch in the admin panel to enable or disable the entire gift card feature. When disabled, the gift card section is hidden from the frontend.

‚∏ª

7.1 Gift Card Types
	1.	E-Card (Digital)
	‚Ä¢	Delivered via email to the recipient
	‚Ä¢	Includes a unique, secure redemption code
	‚Ä¢	Can be used during online checkout or in-store
	2.	Physical Gift Card
	‚Ä¢	Purchased through the website
	‚Ä¢	Admin manually fulfills and delivers or provides to the customer
	‚Ä¢	Code is printed or written on the card
	‚Ä¢	Can also be used online during checkout or in-store

‚∏ª

7.2 Gift Card Purchase Flow (Frontend)
	1.	User fills out gift card form:
	‚Ä¢	Amount
	‚Ä¢	Delivery method (E-card or Physical)
	‚Ä¢	Recipient name
	‚Ä¢	Recipient email (if e-card)
	‚Ä¢	Optional personal message
	‚Ä¢	Purchaser info for confirmation
	2.	User pays via Stripe
	3.	Upon payment:
	‚Ä¢	Gift card code is generated and saved in the database
	‚Ä¢	E-cards are emailed to the recipient
	‚Ä¢	Physical card info is stored for staff to fulfill
	‚Ä¢	Confirmation sent to purchaser

‚∏ª

7.3 Redemption Flow

Online Redemption:
	‚Ä¢	At checkout, customer enters the gift card code
	‚Ä¢	System verifies:
	‚Ä¢	If the code exists
	‚Ä¢	If the card is unused
	‚Ä¢	If valid:
	‚Ä¢	Gift card amount is applied toward the order total
	‚Ä¢	Remaining amount (if any) is paid via Stripe
	‚Ä¢	Gift card is marked as "redeemed" after successful order
	‚Ä¢	If invalid:
	‚Ä¢	User sees an error (e.g., "Invalid or already used")

In-Store Redemption:
	‚Ä¢	Customer presents the gift card code
	‚Ä¢	Staff logs into the admin panel, searches by code
	‚Ä¢	Details shown: amount, recipient, type, status
	‚Ä¢	Staff verifies and manually marks the card as redeemed after use

‚∏ª

7.4 Admin Panel Features

Admin panel section: Gift Cards

Capabilities:
	‚Ä¢	Enable/disable gift card system globally
	‚Ä¢	View all gift card purchases
	‚Ä¢	Filter by:
	‚Ä¢	Delivery method
	‚Ä¢	Redeemed or unredeemed
	‚Ä¢	Search by:
	‚Ä¢	Code, recipient, sender
	‚Ä¢	Manually redeem a card (for in-store use)
	‚Ä¢	Track which orders used gift cards (online redemptions)
	‚Ä¢	Optional: View remaining balances (if supporting partial redemptions later)

‚∏ª

7.5 Code & Balance Logic
	‚Ä¢	Each card has a unique code (DISTRICT-8F9L2M)
	‚Ä¢	Stored in gift_cards table with:
	‚Ä¢	Code
	‚Ä¢	Amount
	‚Ä¢	Status: redeemed or unredeemed
	‚Ä¢	Linked order ID (if redeemed online)
	‚Ä¢	Only one-time full redemption is supported initially
	‚Ä¢	Partial use / balance tracking can be added in a future version

‚∏ª

7.6 Checkout Integration

During online checkout:
	‚Ä¢	Input field for gift card code
	‚Ä¢	If applied:
	‚Ä¢	Gift card amount is deducted from total
	‚Ä¢	Tip and delivery fees still calculated on full order
	‚Ä¢	If balance covers total: Stripe is bypassed
	‚Ä¢	If not: remaining balance is paid via Stripe

‚∏ª

7.7 Email Notifications
	1.	Gift Card Email to Recipient
	‚Ä¢	Includes code, value, sender name, and instructions for both online and in-store use
	2.	Confirmation to Purchaser
	‚Ä¢	Includes purchase summary and status of delivery (e-card sent / physical card pending)

‚∏ª

7.8 Technical Summary
	‚Ä¢	Gift cards stored in their own table
	‚Ä¢	Code lookup logic used in:
	‚Ä¢	Checkout controller (online redemption)
	‚Ä¢	Admin panel (in-store lookup)
	‚Ä¢	Stripe used only for initial purchase
	‚Ä¢	No integration with external POS systems required

‚∏ª

This hybrid model offers maximum flexibility while keeping implementation clean. Customers can gift, receive, and redeem cards across channels, and staff can manage redemptions securely through the admin dashboard.

‚∏ª

PART 8: TIPPING SYSTEM

The tipping system enables customers to leave a gratuity during delivery orders as a percentage of their total bill. This feature is visible only for eligible orders and must be fully configurable from the admin panel.

Tipping is designed to be simple for users, configurable for admins, and clearly accounted for in orders and Stripe transactions.

‚∏ª

8.1 Tipping Availability Rules
	‚Ä¢	Tipping is available only for delivery orders
	‚Ä¢	Pickup orders do not show the tipping interface
	‚Ä¢	If the order type is switched from delivery to pickup at checkout, the tipping field is dynamically hidden
	‚Ä¢	Tipping applies to:
	‚Ä¢	Order subtotal
	‚Ä¢	Add-ons (included in subtotal)
	‚Ä¢	Excludes gift card value if redeemed

‚∏ª

8.2 Tip Selection UI (Frontend)

Customers will see a tipping section at checkout when delivery is selected.

Features:
	‚Ä¢	Preset percentage options, e.g.:
	‚Ä¢	10%, 15%, 20%
	‚Ä¢	Only one value can be selected
	‚Ä¢	Tip is calculated and displayed immediately in the order summary
	‚Ä¢	Total updates in real-time to include the selected tip
	‚Ä¢	If user deselects tipping or resets form, tip value returns to 0

‚∏ª

8.3 Admin Panel ‚Äì Tipping Configuration

Admin panel section: Tipping Settings

Capabilities:
	‚Ä¢	Enable or disable tipping globally
	‚Ä¢	When disabled, tipping UI is removed from checkout entirely
	‚Ä¢	Configure available percentages (e.g., [10, 15, 20])
	‚Ä¢	Stored as an array or collection
	‚Ä¢	At least one option is required
	‚Ä¢	Optional toggle: allow no-tip option (admin can require or allow skipping tips)

‚∏ª

8.4 Backend Logic and Storage

When an order is placed:
	‚Ä¢	The selected tip percentage and the calculated amount are saved with the order
	‚Ä¢	Tip amount is included in the total Stripe charge
	‚Ä¢	Stored fields:
	‚Ä¢	tip_percentage (nullable)
	‚Ä¢	tip_amount (decimal)
	‚Ä¢	is_tip_applied (boolean)

The tip is treated as non-refundable, and will show up in admin order views and Stripe transaction history.

‚∏ª

8.5 Stripe Integration Notes
	‚Ä¢	The tip is included in the final charge to Stripe along with:
	‚Ä¢	Subtotal
	‚Ä¢	Delivery fee (if any)
	‚Ä¢	Taxes (if applicable)
	‚Ä¢	No separate tipping line is required in Stripe unless needed for reporting

‚∏ª

8.6 Admin Order View

Admins viewing an order in the dashboard will see:
	‚Ä¢	Total order amount
	‚Ä¢	Tip amount (with percentage used)
	‚Ä¢	Tip appears as a distinct field in the order detail view
	‚Ä¢	Tip is included in the order summary export or reporting (if enabled)

‚∏ª

8.7 Technical Notes
	‚Ä¢	Tipping logic is applied only at the time of checkout
	‚Ä¢	The tipping interface is driven via frontend logic based on order type
	‚Ä¢	Admin tipping configuration is stored in a global settings table or JSON config
	‚Ä¢	Validation ensures only permitted tip values are accepted during form submission

‚∏ª

This tipping system encourages additional revenue for delivery personnel while giving customers a seamless, optional way to support staff. Admins retain full control over whether and how tipping is used.

‚∏ª

Here is Part 9: Checkout & Authentication Logic, which defines the entire customer-facing checkout process, how orders are submitted, how user data is handled, and the system's authentication policy ‚Äî with emphasis on guest checkout.

‚∏ª

PART 9: CHECKOUT & AUTHENTICATION LOGIC

This section outlines the structure and behavior of the checkout experience on the frontend, and the authentication policy governing how customer data is handled.

The checkout flow is designed to be fast, frictionless, and guest-only, ensuring users can place orders or buy gift cards without creating an account.

‚∏ª

9.1 Authentication Policy
	‚Ä¢	This platform follows a guest-first approach
	‚Ä¢	There is no user registration or login system at launch
	‚Ä¢	All orders are associated with:
	‚Ä¢	Customer name
	‚Ä¢	Email
	‚Ä¢	Phone number (optional)
	‚Ä¢	Delivery address (for delivery orders)
	‚Ä¢	Data is stored only for that order session, not linked to a persistent customer account

Benefits of guest-only model:
	‚Ä¢	Faster order flow
	‚Ä¢	No password fatigue or login friction
	‚Ä¢	Easy for one-time users or gift card buyers
	‚Ä¢	Cleaner and simpler database

Note:
If needed later, user authentication can be added modularly (e.g., for order history or loyalty programs), but it is intentionally excluded for now to keep the system simple and optimized.

‚∏ª

9.2 Checkout Form ‚Äì Structure & Fields

Checkout form adjusts dynamically based on the selected order type (pickup or delivery).

Common Fields:
	‚Ä¢	Name (required)
	‚Ä¢	Email (required)
	‚Ä¢	Phone number (optional)
	‚Ä¢	Notes to kitchen (optional)

For Pickup Orders:
	‚Ä¢	Pickup time selection (auto-suggested earliest time)
	‚Ä¢	Notes (e.g., "Please pack extra napkins")

For Delivery Orders:
	‚Ä¢	Delivery address:
	‚Ä¢	Street address
	‚Ä¢	Postal code
	‚Ä¢	City
	‚Ä¢	Delivery eligibility validation (based on delivery radius)
	‚Ä¢	Tip selection (percentage)
	‚Ä¢	Optional delivery instructions

If a gift card is applied:
	‚Ä¢	Gift card code field
	‚Ä¢	Validation on submission
	‚Ä¢	Partial payment fallback to Stripe (if card does not cover full amount)

‚∏ª

9.3 Real-Time Validations
	‚Ä¢	Mandatory fields are enforced with inline validation
	‚Ä¢	Delivery address must fall within configured delivery zone
	‚Ä¢	Gift card code must:
	‚Ä¢	Exist in the database
	‚Ä¢	Not be redeemed
	‚Ä¢	Cover total or partial payment

‚∏ª

9.4 Order Review & Confirmation

Before finalizing, user sees:
	‚Ä¢	Cart summary with itemized costs
	‚Ä¢	Add-ons and extras listed per item
	‚Ä¢	Delivery fee (if applicable)
	‚Ä¢	Tip amount (if selected)
	‚Ä¢	Gift card applied (if any)
	‚Ä¢	Total cost breakdown
	‚Ä¢	Confirm button leads to payment via Stripe

‚∏ª

9.5 Payment Gateway Integration (Stripe)
	‚Ä¢	Stripe is used for all payments
	‚Ä¢	Payment request includes:
	‚Ä¢	Order total (after tip and delivery fee)
	‚Ä¢	Deducted gift card amount (if applicable)
	‚Ä¢	Only successful payments create a valid order entry

‚∏ª

9.6 Post-Checkout Flow
	‚Ä¢	User is redirected to an Order Confirmation page showing:
	‚Ä¢	Order ID
	‚Ä¢	Pickup time or delivery ETA
	‚Ä¢	Summary of items, tip, and total
	‚Ä¢	Confirmation email is sent to the customer
	‚Ä¢	Admin receives new order in dashboard with "Pending" status

‚∏ª

9.7 Gift Card Checkout Differences

The checkout flow for purchasing a gift card differs from a food order:
	‚Ä¢	No delivery or pickup selection
	‚Ä¢	No cart or item list
	‚Ä¢	Form includes:
	‚Ä¢	Recipient name/email
	‚Ä¢	Sender name/email
	‚Ä¢	Amount
	‚Ä¢	Message
	‚Ä¢	After payment, the gift card is issued and stored

‚∏ª

9.8 Data Handling & Privacy
	‚Ä¢	Customer details are stored per order only
	‚Ä¢	No long-term customer profiles are created
	‚Ä¢	Admins can view order records in dashboard
	‚Ä¢	Optional: Export order records to CSV for marketing or analytics (future)

‚∏ª

This structure ensures a fast and seamless checkout experience for all users, while maintaining secure order handling and a low-friction purchasing journey.

‚∏ª

PART 10: LOCALIZATION & BILINGUAL SUPPORT

The restaurant operates in Ontario, Canada, where English is the primary language, but French-language support is desirable for accessibility and customer reach. This system will be built using Laravel's native localization features, with bilingual readiness from the outset.

French will be added as a second language option accessible through a language toggle on the frontend.

‚∏ª

10.1 Supported Languages
	‚Ä¢	Primary Language: English
	‚Ä¢	Secondary Language (Optional Toggle): French

Customers can switch between the two using a language toggle prominently placed in the website header (e.g., dropdown or icon).

‚∏ª

10.2 Localization System

Laravel's native localization functionality (lang folder with language JSON or array files) will be used for:
	‚Ä¢	Static frontend content (headings, buttons, labels, instructions)
	‚Ä¢	Checkout steps, form fields, confirmation messages
	‚Ä¢	Email content templates (order confirmation, gift cards)

All strings will be wrapped in the __() helper or @lang directive for translation readiness.

‚∏ª

10.3 Database-Driven Fields and Translations

Some content is stored in the database, such as:
	‚Ä¢	Menu category names
	‚Ä¢	Menu item names and descriptions
	‚Ä¢	Add-on names
	‚Ä¢	Tag names (GF, VEG, etc.)

For these, a dual-language field strategy will be used:

Field	Language
name_en	English
name_fr	French
description_en	English
description_fr	French

Admin panel forms will allow input for both languages. If the French field is left blank, the system will default to English.

‚∏ª

10.4 Admin Panel Localization
	‚Ä¢	Admin interface will remain in English only
	‚Ä¢	Admins can enter bilingual content via dedicated fields
	‚Ä¢	Language toggle will not affect backend views or FilamentPHP panel

‚∏ª

10.5 Language Toggle Behavior
	‚Ä¢	Toggle is available globally at the top of all frontend pages
	‚Ä¢	Once selected, the site persists the language choice using:
	‚Ä¢	Session or cookie (for temporary visit)
	‚Ä¢	Fallback to browser language preference
	‚Ä¢	All page content, labels, and static text will immediately reflect the chosen language
	‚Ä¢	Dynamic content (menu, cart, checkout) will render using *_en or *_fr fields

‚∏ª

10.6 Translation Workflow

For launch:
	‚Ä¢	Static English strings will be fully implemented
	‚Ä¢	French translations will be optionally added where available
	‚Ä¢	Untranslated dynamic fields will fallback to English until populated

Admin training or documentation may be created to guide staff in managing translations within the FilamentPHP dashboard.

‚∏ª

10.7 Future Enhancements (Optional)
	‚Ä¢	Use of third-party services (e.g., Weglot or DeepL) for automated translations
	‚Ä¢	Expansion to additional languages
	‚Ä¢	Locale-based routing (/en, /fr URL prefixing)
	‚Ä¢	Language-specific SEO metadata

‚∏ª

This localization strategy ensures that bilingual requirements are met in a scalable, maintainable, and user-friendly way, without increasing frontend complexity or development burden.


‚∏ª

PART 11: TECHNOLOGY STACK & TOOLS

This section outlines the full technology ecosystem that powers the web application. The stack has been selected for scalability, developer friendliness, integration flexibility, and AI-assisted development via platforms like Cursor.

‚∏ª

11.1 Core Framework

Layer	Technology
Backend Framework	Laravel 11 (PHP 8.2+)
Frontend Rendering	Blade templates (with Tailwind CSS)
Admin Panel	FilamentPHP
Database	MySQL (with support for future PostgreSQL migration)
Payment Processing	Stripe
Mail Delivery	Laravel Mail (SMTP, Mailgun, or SES)
Localization	Laravel lang files with dual-language content fields
QR/Barcode (optional)	milon/barcode or simple-qrcode (for future physical card scanning)


‚∏ª

11.2 Frontend UI/UX Stack

Tool	Purpose
Tailwind CSS	Utility-first styling for both frontend and admin
Alpine.js (optional)	For minimal frontend interactivity
Livewire (optional)	Reactive UI components within Laravel if needed
JavaScript (vanilla)	Light scripting for form behaviors, toggles, etc.
Language Toggle	JS + session/cookie logic for language preference


‚∏ª

11.3 Admin Panel (FilamentPHP)

FilamentPHP will manage:
	‚Ä¢	Menu item CRUD
	‚Ä¢	Categories and tags
	‚Ä¢	Add-ons
	‚Ä¢	Gift card records
	‚Ä¢	Orders and tipping
	‚Ä¢	Delivery & pickup settings
	‚Ä¢	Global settings (logo, hours, notices)

Why FilamentPHP:
	‚Ä¢	Beautiful UI out of the box
	‚Ä¢	Easily extendable with custom forms, pages, widgets
	‚Ä¢	Well-integrated with Laravel's service container and policies

‚∏ª

11.4 Payment Gateway

Service	Purpose
Stripe	For all customer payments including food orders and gift cards

Stripe integration includes:
	‚Ä¢	One-time charges
	‚Ä¢	Coupon/gift card deductions
	‚Ä¢	Order metadata attached to transaction
	‚Ä¢	Stripe webhook support (for confirmation/failure)

‚∏ª

11.5 Deployment & Hosting

Component	Details
Cloud Provider	Google Cloud Platform (GCP) or AWS
Server Type	VM or EC2 instance
Web Server	Nginx (with PHP-FPM)
SSL	Free SSL (e.g., Let's Encrypt or GCP/AWS-managed certs)
Storage	Local disk or S3/GCS for images
Domain	Custom domain setup with DNS configuration
CDN (optional)	Cloudflare (for caching, security, and performance boost)



‚∏ª

This stack is designed to be lean yet powerful, minimizing dependencies while offering robust control, speed, and room to scale as the restaurant's needs grow.

‚∏ª

Here is Part 12: Deployment Preferences & Operational Setup, which outlines how the application will be deployed, what infrastructure decisions have been made, and how the environment will be configured to support performance, scalability, and maintainability.

‚∏ª

PART 12: DEPLOYMENT PREFERENCES & OPERATIONAL SETUP
‚∏ª


12.8 Performance Considerations
	‚Ä¢	Laravel's built-in caching (config, routes, views) enabled in production
	‚Ä¢	php artisan optimize run post-deployment
	‚Ä¢	Optional use of Redis for queue and session caching (if needed)
	‚Ä¢	Database indexes will be added for frequent query fields (e.g., gift card codes, order timestamps)

‚∏ª

12.9 Monitoring & Maintenance

Recommended:
	‚Ä¢	Enable basic uptime monitoring (e.g., UptimeRobot or GCP Ops Suite)
	‚Ä¢	Log rotation setup via Laravel and system cron
	‚Ä¢	Laravel Debugbar disabled in production
	‚Ä¢	Firewall/security rules to restrict SSH and DB access
	‚Ä¢	Optional: admin audit log inside Filament panel

‚∏ª

This deployment strategy ensures the site remains fast, secure, and easy to maintain, while leaving room for advanced features like CDN, containerization, or serverless upgrades in the future.


‚∏ª

PART 13: DATABASE DESIGN SUMMARY (ERD)

The database schema has been carefully designed to support a modular restaurant application with customizable menu items, order handling, gift card logic, delivery/pickup features, and tipping.

Each entity corresponds to a relational table in MySQL, with defined relationships, foreign keys, and appropriate indexing. FilamentPHP will use these tables to create dynamic admin resources.

‚∏ª

13.1 Core Tables & Relationships

‚∏ª

categories

Field	Type	Notes
id	bigint	Primary key
name_en	string	English category name
name_fr	string	French category name
is_deliverable	boolean	Whether this category supports delivery
sort_order	integer	For frontend display
is_visible	boolean	Show/hide on site

Relationships:
	‚Ä¢	One category has many menu_items

‚∏ª

menu_items

Field	Type	Notes
id	bigint	Primary key
category_id	foreignId	Belongs to categories
name_en	string	English name
name_fr	string	French name
description_en	text	English description
description_fr	text	French description
price	decimal	Base price
preparation_time_minutes	integer	Used for pickup time logic
is_pickup_only	boolean	If true, not shown in delivery flow
is_available	boolean	Controls live visibility
image_path	string	Stored image filename/path
sort_order	integer	Custom sort value


‚∏ª

menu_item_tags

Field	Type	Notes
id	bigint	Primary key
menu_item_id	foreignId	Belongs to menu_items
tag_name	string	e.g., "GF", "VEG", "Spicy"

Relationships:
	‚Ä¢	Many tags belong to one menu item

‚∏ª

add_ons

Field	Type	Notes
id	bigint	Primary key
menu_item_id	foreignId	Belongs to menu_items
name_en	string	English add-on name
name_fr	string	French add-on name
price	decimal	Additional cost

Relationships:
	‚Ä¢	Many add-ons belong to one menu item

‚∏ª

orders

Field	Type	Notes
id	bigint	Primary key
customer_name	string	Required
customer_email	string	Required
customer_phone	string	Optional
order_type	enum	"pickup" or "delivery"
delivery_address	text	Nullable if pickup
tip_percentage	integer	Optional (e.g., 15)
tip_amount	decimal	Optional
delivery_fee	decimal	Optional
gift_card_code_used	string	Nullable
total_amount	decimal	Final amount charged
status	enum	"pending", "preparing", "ready", "completed", "canceled"
pickup_time	datetime	Nullable
created_at	timestamp	Auto-handled


‚∏ª

order_items

Field	Type	Notes
id	bigint	Primary key
order_id	foreignId	Belongs to orders
menu_item_id	foreignId	Refers to menu_items
quantity	integer	How many of this item
selected_add_ons	json	List of selected add-on names or IDs
subtotal	decimal	Item subtotal with add-ons

Relationships:
	‚Ä¢	One order has many order_items

‚∏ª

gift_cards

Field	Type	Notes
id	bigint	Primary key
code	string	Unique alphanumeric string
amount	decimal	Total gift card value
recipient_name	string	Shown on email/record
recipient_email	string	For e-cards
sender_name	string	Shown in email
sender_email	string	For confirmation receipt
message	text	Optional
delivery_type	enum	"ecard" or "physical"
is_redeemed	boolean	True if used (online or in store)
redeemed_at	datetime	Optional
order_id	foreignId	Nullable ‚Äî linked if used online
created_at	timestamp	Purchase time


‚∏ª

delivery_settings

Field	Type	Notes
id	int	Singleton (1 row)
delivery_radius_km	integer	Max delivery distance
delivery_fee	decimal	Flat fee
kitchen_open_time	time	e.g., 16:00
kitchen_close_time	time	e.g., 22:00
buffer_time_minutes	integer	Time added to prep estimate
delivery_enabled	boolean	Toggle from admin
pickup_enabled	boolean	Toggle from admin


‚∏ª

tipping_settings

Field	Type	Notes
id	int	Singleton
tipping_enabled	boolean	Global toggle
tip_percentages	json	[10, 15, 20] or similar


‚∏ª

admins

| Managed by FilamentPHP | Uses Laravel's built-in user model & auth features for admin access. |

‚∏ª

This schema supports all planned frontend/backend features and allows easy extension for loyalty systems, partial gift card redemptions, or recurring customers in the future.

‚∏ª

This concludes the technical documentation for the platform.
‚∏ª

üìã PROJECT CHECKPOINT: IMPLEMENTATION PROGRESS

As of May 7, 2023, we have completed the following:

üìã PROJECT CHECKPOINT: IMPLEMENTATION PROGRESS

As of May 14, 2023, we have completed the following:

‚úÖ Database Schema Design & Implementation:
- All migration files created with proper fields and relationships
- Categories, Menu Items, Tags, Add-ons, Orders, Gift Cards, Settings tables

‚úÖ Model Creation & Relationships:
- All models defined with proper fillable attributes
- Relationships established between models
- Type casting implemented 

‚úÖ Base Project Structure:
- Laravel 11 framework installed
- FilamentPHP admin panel installed and configured
- Stripe PHP SDK integrated
- TailwindCSS configured
- Project directory structure established

‚úÖ Admin Panel Implementation (Complete):
- All FilamentPHP resources fully implemented with:
  - Custom forms with proper fields and validation
  - Resource tables with sorting, filtering, and search
  - Relationship managers for related entities
- Menu Category and Menu Item management with tags and add-ons
- Order management with detailed item views and receipt generation
- Gift Card system with creation and redemption functionality
- Delivery & Pickup settings with time and radius configuration
- System Settings page with toggles for gift cards and tipping

‚è≠ NEXT STEPS:

1. Develop frontend customer interface:
   - Create menu browsing page with category filtering
   - Implement cart functionality with add-ons selection
   - Build checkout flow with pickup/delivery validation
   - Design gift card purchase interface
   - Create order confirmation and status pages

2. Implement core order processing logic:
   - Delivery radius validation using address
   - Pickup/delivery time calculations
   - Gift card application and redemption flow
   - Tip calculation for delivery orders

3. Integrate payment processing:
   - Configure Stripe for one-time payments
   - Implement gift card redemption logic
   - Handle partial payments with gift cards

4. Add language localization:
   - Implement language toggle
   - Create translation files for English/French

5. Design and responsive UI:
   - Build mobile-friendly layout
   - Ensure accessibility compliance
   - Create consistent branding across all pages

6. Testing and deployment:
   - Conduct end-to-end testing of order flow
   - Verify delivery radius calculations
   - Test gift card redemption
   - Configure production environment

This checkpoint will guide the next development session as we shift focus to building the customer-facing frontend components. 